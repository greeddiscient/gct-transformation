[{"/Users/djurus/Documents/GCT/gct-transformation/src/App.js":"1","/Users/djurus/Documents/GCT/gct-transformation/src/reportWebVitals.js":"2","/Users/djurus/Documents/GCT/gct-transformation/src/index.js":"3","/Users/djurus/Documents/GCT/gct-transformation/src/components/sidebar/sidebar.component.js":"4","/Users/djurus/Documents/GCT/gct-transformation/src/components/SlideFrame.js":"5"},{"size":7000,"mtime":1607616968119,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607452111445,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1607452111445,"results":"9","hashOfConfig":"7"},{"size":1851,"mtime":1607613894345,"results":"10","hashOfConfig":"7"},{"size":2463,"mtime":1607620058976,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tcjc00",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/djurus/Documents/GCT/gct-transformation/src/App.js",["24"],"/Users/djurus/Documents/GCT/gct-transformation/src/reportWebVitals.js",[],"/Users/djurus/Documents/GCT/gct-transformation/src/index.js",[],"/Users/djurus/Documents/GCT/gct-transformation/src/components/sidebar/sidebar.component.js",["25"],"import React,{useState} from 'react'\n\nimport './sidebar.styles.css'\n\nexport default class Sidebar extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            isCFU: false,\n            isFU: false\n        }\n    }\n    handleCFUDropdown=()=>{\n        this.setState({isCFU: !this.state.isCFU})\n    }\n    handleFUDropdown=()=>{\n        this.setState({isFU: !this.state.isFU})\n    }\n    render(){\n        return(\n            <div className=\"sidebar\">\n                <div className=\"period\">\n                    <h1 className=\"period-header\">Period:</h1>\n                    <select>\n                        <option value=\"Oct 2020\">Oct 2020</option>\n                    </select>\n                </div>        \n                <div className = \"group-transformation\">\n                    Group Transformation\n                </div>\n                <div class=\"dropdown\" onClick={this.handleCFUDropdown}>\n                    CFU Transformation\n                </div>\n                {this.state.isCFU ? <div>\n                    <ul>\n                        <li>MOB</li>\n                        <li>CONS</li>\n                        <li>ENT</li>\n                        <li>WIB</li>\n                    </ul>\n                </div> : <div></div>}\n                <div class=\"dropdown\" onClick={this.handleFUDropdown}>\n                    FU Transformation\n                </div>\n                {this.state.isFU ? <div>\n                    <ul>\n                        <li>DB</li>\n                        <li>NITS</li>\n                        <li>FIN</li>\n                        <li>HCM</li>\n                        <li>SP</li>\n                        <li>GCT</li>\n                        <li>CorSec</li>\n                    </ul>\n                </div> : <div></div>}\n            </div>\n            \n        )\n    }\n    \n}","/Users/djurus/Documents/GCT/gct-transformation/src/components/SlideFrame.js",["26"],"import React,{useState} from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CardMedia, Box, Card } from '@material-ui/core';\nimport mob1 from '../img/mob/1.png'\nimport mob2 from '../img/mob/2.png'\nimport ent1 from '../img/ent/1.png'\nimport ent2 from '../img/ent/2.png'\nimport ent3 from '../img/ent/3.png'\nimport ent4 from '../img/ent/4.png'\nimport cons1 from '../img/cons/1.png'\nimport cons2 from '../img/cons/2.png'\nimport wib1 from '../img/wib/1.png'\nimport wib2 from '../img/wib/2.png'\nimport wib3 from '../img/wib/3.png'\nimport db1 from '../img/db/1.png'\nimport db2 from '../img/db/2.png'\nimport db3 from '../img/db/3.png'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { useLocation } from 'react-router-dom'\n\nconst useStyles = makeStyles({\n    media: {\n      width: 1000,\n      height: 563,\n      \n    },\n    clickableIcon:{\n        color: 'grey',\n        '&:hover': {\n        color: 'black',\n        },\n    },\n    card: {\n        maxWidth: 1200,\n      },\n  });\n\nconst identifier = {\n    group: [],\n    mob: [mob1,mob2],\n    ent:[ent1,ent2,ent3,ent4],\n    cons:[cons1,cons2],\n    wib:[wib1,wib2,wib3],\n    fin:[],\n    db:[db1,db2,db3],\n    nits:[],\n    hcm:[],\n    sp:[],\n    gct:[]\n    \n}\n\nexport default function SlideFrame(){\n    const location = useLocation()\n    const [count, setCount] = React.useState(0);\n    var tagging = location.pathname.substring(1)\n    if (tagging===\"\"){\n        tagging='group'\n    }\n    const handleLeft=()=>{\n        if(count === 0){\n\n        }\n        else{\n            setCount(count-1)\n        }\n    }\n    const handleRight=()=>{\n        if(count === identifier[tagging].length-1){\n\n        }\n        else{\n            setCount(count+1)\n        }\n    }\n    const classes = useStyles();\n\n        return(\n\n            <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\" >\n                <ChevronLeftIcon onClick= {handleLeft}className={classes.clickableIcon} button fontSize=\"large\"/>\n                <Card className={classes.card}>\n                    <CardMedia\n                            className={classes.media}\n                            image={identifier[tagging][count]}\n                    />\n                </Card>\n\n                 <ChevronRightIcon onClick ={handleRight} className={classes.clickableIcon} fontSize = \"large\"/>\n            </Box>\n \n        )\n    \n}",{"ruleId":"27","severity":1,"message":"28","line":29,"column":7,"nodeType":"29","messageId":"30","endLine":29,"endColumn":19},{"ruleId":"27","severity":1,"message":"31","line":1,"column":15,"nodeType":"29","messageId":"30","endLine":1,"endColumn":23},{"ruleId":"27","severity":1,"message":"31","line":1,"column":15,"nodeType":"29","messageId":"30","endLine":1,"endColumn":23},"no-unused-vars","'LinkBehavior' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used."]